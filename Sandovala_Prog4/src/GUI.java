/**
This class contains all the buttons for the GUI and a method to connect 
to the server and a method to send messages to the server
@author  Andre Sandoval, Derek Schultz
*/

import java.io.*;
import java.net.*;
import java.util.Collections;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;

public class GUI extends javax.swing.JFrame 
{
    
   /**
   * Creates new form GUI
   */

   String messageSentToServer = ""; 
   String messageRecievedFromServer; 
   private static DataOutputStream outToServer;
   private static BufferedReader inFromServer;
   private static Socket clientSocket;

   public GUI() 
   {
      initComponents();
   }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        btn_Connect = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jButton1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<>();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jLabel1.setText("IP Address");

        jLabel2.setText("Port Number");

        jTextField1.setText("localhost");

        jTextField2.setText("5921");

        btn_Connect.setText("Connect");
        btn_Connect.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_ConnectMouseClicked(evt);
            }
        });
        btn_Connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ConnectActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jList1);

        jButton1.setText("Put");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jList2.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(jList2);

        jButton2.setText("Get");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel3.setText("Output Messages");

        jLabel4.setText("Server Files");

        jLabel5.setText("Client Files");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_Connect))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane3)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE))
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel5)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_Connect)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel4)
                        .addGap(7, 7, 7)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(37, 37, 37)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_ConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ConnectActionPerformed

    }//GEN-LAST:event_btn_ConnectActionPerformed

    private void btn_ConnectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_ConnectMouseClicked
       connectToServer();
       listRemoteFiles();
    }//GEN-LAST:event_btn_ConnectMouseClicked

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
       listLocalFiles();
        
    }//GEN-LAST:event_formWindowActivated

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       try 
       {
          sendFile();
          listRemoteFiles();
          listLocalFiles();
       } 
       catch (IOException ex) 
       {
          Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
       }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       getFile();
       listRemoteFiles();
       listLocalFiles();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
   public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

      /* Create and display the form */
      java.awt.EventQueue.invokeLater(new Runnable() 
      {
      public void run() 
      {
         new GUI().setVisible(true);
      }
      });   
   }
   
   /**
   Connects to the server when the connect button is pressed and disconnects 
   from the server when the disconnect button is pressed and sets the correct 
   text of the connect button depending if its connected or not.
   */
   public void connectToServer()
   {
      if(btn_Connect.getText().equals("Connect"))
      {
         btn_Connect.setText("Disconnect");
         try 
         {
            clientSocket = new Socket
            (jTextField1.getText(), Integer.parseInt(jTextField2.getText()));
            outToServer = new DataOutputStream(clientSocket.getOutputStream());
            inFromServer = new BufferedReader(new InputStreamReader
            (clientSocket.getInputStream()));
         } 
         catch (IOException ex) 
         {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
         }
         jTextArea1.append("Connected to Server" + '\n');
      }
      else if(btn_Connect.getText().equals("Disconnect") )
      {
         try 
         {
            clientSocket.close();
            outToServer.close();
            inFromServer.close();
            jTextArea1.append("Disconnected!"  + '\n'); 
            btn_Connect.setText("Connect");
         } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
         }
      }
   }
   
   /**
   List all the files that are stored remotely on the server 
   */    
   public void listRemoteFiles()
   { 
      try 
      {
         messageSentToServer = "listFiles"; 
         outToServer.writeBytes(messageSentToServer + '\n');
         messageRecievedFromServer = inFromServer.readLine();
      } 
      catch (IOException ex) 
      {
         Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
      }
      
      String s = messageRecievedFromServer;
      
      Vector a = new Vector();
      
      String[] splitArray = s.split(" ");

      for(int i = 0; i < splitArray.length; i++)
       {
          String fileNames = splitArray[i];
          Collections.addAll(a, fileNames);         
       }
       jList2.setListData(a);
   }
   
   /**
   Lists all the client files in the jList
   */    
   private void listLocalFiles()
   {
       String Dir = "ClientFiles";
       File dir = new File(Dir); 
       // create a new instance of File class and set the pathname
       File [] files = dir.listFiles(); // get the list of all files 
       Vector v = new Vector();
          
       for(int i = 0; i < files.length; i++)
       {
          String fileNames = files[i].getName();
          Collections.addAll(v, fileNames);         
       }
       jList1.setListData(v);   
   } 
   
   /**
   Sends a file from the client to the server and prints out the messages to 
   the text box
   */     
   private void sendFile() throws FileNotFoundException, IOException
   {
        String fileName = jList1.getSelectedValue();
        
        OutputStream outputFile = new FileOutputStream("ServerFiles\\" 
                + fileName);
        
        File fileToSend = new File("ClientFiles\\" + fileName);
        
        byte[] mybytearray = new byte[(int) fileToSend.length() + 1];
        
        FileInputStream fis = new FileInputStream(fileToSend);
        
        BufferedInputStream bis = new BufferedInputStream(fis);
        
        bis.read(mybytearray, 0, mybytearray.length);
        jTextArea1.append("Sending the file..." + '\n');
        outputFile.write(mybytearray, 0, mybytearray.length);
        outputFile.flush();
        
        jTextArea1.append("File " + jList1.getSelectedValue() + '\n');
        jTextArea1.append( fileToSend.length() + " bytes sent" + '\n');
        listRemoteFiles();
        
   }

   /**
   Receives a file from the server
   */
   private void getFile()
   {
      try 
      {
         messageSentToServer = "SendFile"; 
         outToServer.writeBytes(messageSentToServer + '\n');
         jTextArea1.append("Recieving the file..." + '\n');
         messageSentToServer = jList2.getSelectedValue();
         jTextArea1.append("Got the file " + messageSentToServer + '\n');
         outToServer.writeBytes(messageSentToServer + '\n');
         jTextArea1.append("Data connection closed" + '\n');
         listLocalFiles();

      } 
      catch (IOException ex) 
      {
         Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
      }  
   }
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Connect;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JList<String> jList1;
    private javax.swing.JList<String> jList2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables

}
