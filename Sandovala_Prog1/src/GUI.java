/**
This class contains all the buttons for the GUI and a method to connect 
to the server and a method to send messages to the server
@author  Andre Sandoval
*/

import java.io.*;
import java.net.*;
import java.util.logging.Level;
import java.util.logging.Logger;

public class GUI extends javax.swing.JFrame 
{
    
   /**
   * Creates new form GUI
   */

   String messageSentToServer = ""; 
   String messageRecievedFromServer; 
   private static DataOutputStream outToServer;
   private static BufferedReader inFromServer;
   private static Socket clientSocket;

   public GUI() 
   {
      initComponents();
   }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        btn_Connect = new javax.swing.JButton();
        btn_Send = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("IP Address");

        jLabel2.setText("Port Number");

        jLabel3.setText("Message to Server");

        jTextField1.setText("137.104.121.40");

        jTextField2.setText("5764");

        btn_Connect.setText("Connect");
        btn_Connect.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_ConnectMouseClicked(evt);
            }
        });
        btn_Connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ConnectActionPerformed(evt);
            }
        });

        btn_Send.setText("Send");
        btn_Send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_SendActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btn_Send, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField3)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_Connect))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 489, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_Connect))
                .addGap(46, 46, 46)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_Send)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_ConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ConnectActionPerformed

    }//GEN-LAST:event_btn_ConnectActionPerformed

    private void btn_SendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_SendActionPerformed
       if(btn_Connect.getText().equals("Disconnect"))
       {
          sendMessageToServer();
       }
       else
          jTextArea1.append("Not connected to Server"  + '\n'); 
          jTextField3.setText(""); 
    }//GEN-LAST:event_btn_SendActionPerformed

    private void btn_ConnectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_ConnectMouseClicked
       // TODO add your handling code here:
       connectToServer();
    }//GEN-LAST:event_btn_ConnectMouseClicked

    /**
     * @param args the command line arguments
     */
   public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

      /* Create and display the form */
      java.awt.EventQueue.invokeLater(new Runnable() 
      {
      public void run() 
      {
         new GUI().setVisible(true);
      }
      });   
   }
   
   /**
   Connects to the server when the connect button is pressed and disconnects 
   from the server when the disconnect button is pressed and sets the correct 
   text of the connect button depending if its connected or not.
   */
   public void connectToServer()
   {
      if(btn_Connect.getText().equals("Connect"))
      {
         btn_Connect.setText("Disconnect");
     
         try 
         {
            clientSocket = new Socket
            (jTextField1.getText(), Integer.parseInt(jTextField2.getText()));
            outToServer = new DataOutputStream(clientSocket.getOutputStream());
            inFromServer = new BufferedReader(new InputStreamReader
            (clientSocket.getInputStream()));
         } 
         catch (IOException ex) 
         {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
         }
         jTextArea1.append("Connected to Server" + '\n');
      }
      else if(btn_Connect.getText().equals("Disconnect") )
      {
         try 
         {
            clientSocket.close();
            outToServer.close();
            inFromServer.close();
            jTextArea1.append("Disconnected!"  + '\n'); 
            btn_Connect.setText("Connect");
         } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
         }
      }
   }
   
   /**
   Allows you to send and receive messages from the server and appends those 
   messages to the text area. Also clears the text field after something is
   entered.
   */    
   public void sendMessageToServer()
   {   
      try 
      {
         messageSentToServer = jTextField3.getText(); 
         outToServer.writeBytes(messageSentToServer + '\n');
         jTextArea1.append("Client: " + messageSentToServer + '\n');
      } 
      catch (IOException ex) 
      {
         Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
      }
      try 
      {
         messageRecievedFromServer = inFromServer.readLine();
      } 
      catch (IOException ex) 
      {
         Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
      }
      
      jTextArea1.append("Server: " + messageRecievedFromServer + '\n');
         
      if(messageRecievedFromServer.equals("Good Bye!"))
      {
         jTextArea1.append("Disconnected!"  + '\n');
         btn_Connect.setText("Connect");
      }
      jTextField3.setText(""); 
   }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Connect;
    private javax.swing.JButton btn_Send;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables

}
